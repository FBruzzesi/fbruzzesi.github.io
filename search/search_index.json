{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"\ud83d\udc4b Hi there, I'm Francesco","text":"<p>Disclaimer</p> <p>All the opinions on this blog are solely my own and do not represent the view of my employers, current nor previous.</p>"},{"location":"about/#who-am-i","title":"\ud83e\uddb8\u200d\u2642\ufe0f Who am I?","text":"<p>I hate to describe myself with a generic title - it may sound clich\u00e8, yet I am a curious mind and a passionate learner.</p> <p>I fell in love with mathematics in my early years, I can remember counting and adding numbers at 4 or 5: mathematics and logic reasoning have been a big part of my life ever since.</p> <p>After pursuing a M.Sc. in pure mathematics at ALGANT, I decided to not join a PhD programme, which would have been the natural path forward, but to move into industry to solve real-world problems through mathematical models and machine learning.</p> <p>This was in the mid-late 2018, and data science hype landed in Italy as well (that's when you should know you are already late to the party \ud83d\ude02).</p> <p>That was about the time I started to learn about the topic and in late 2018 I started working as a data scientist, and I am still at it today.</p>"},{"location":"about/#employers","title":"\ud83d\udcbc Employer(s)","text":"<ul> <li>Currently, I am a data scientist at HelloFresh \ud83c\udf4b in Berlin office.</li> <li>Previously I worked a senior data scientist at Edison\u26a1 one of the leading Italian electric utility company, under the EDF group. Here I was involved maily on mid and down stream projects on tabular data, time series, anomaly detection, and optimization.</li> <li>My career started in a consulting company called Avanade, a joint venture between Microsoft and Accenture, where I worked as a data engineer and data scientist on several projects for big clients in the telco, energy and automotive sectors.</li> </ul>"},{"location":"about/#open-source","title":"\ud83d\udcbb Open Source","text":"<p>I consider myself an open source enthusiast, and I try to contribute to it as much as I can (which is not much, but I am trying to improve) to give back to the community.</p> <p>Here is a list of open source projects I created (mostly for my own use and need but hopefully useful to others as well) and/or maintain:</p> <ul> <li>iso-week-date is a toolkit to work with strings representing ISO Week date in two formats: week YYYY-WNN and week date YYYY-WNN-D.</li> <li>Timebasedcv: a python library that provides a cross validation strategy based on actual datetime values instead of indexes, of course compatible with scikit-learn cross validation API.</li> <li>Compclasses: a python utility library to simplify composition (over inheritance).</li> <li>Deczoo: a zoo for python decorators, a collection of decorators used on a daily basis.</li> <li>scikit-lego: A collection of lego bricks for scikit-learn pipelines. I am a contributor to this project and a maintainer since Sept 2023.</li> </ul>"},{"location":"about/#how-to-reach-me","title":"\ud83d\udceb How to reach me","text":"<p>The best way to reach out or connect with me is via linkedin. I am always happy to connect with people and talk about data science, machine learning, mathematics, or anything else.</p>"},{"location":"about/#tech-stack","title":"\ud83d\udd27 Tech stack","text":"<p>Non-exhaustive list and in various order, the tech stack I am most familiar with:</p> <p> </p> <p> </p> <p> </p>"},{"location":"blog/2023/12/21/hello-world-/","title":"Hello world \ud83d\udc4b","text":"<p>Roughly one year ago I attended one of the most interesting and fun (online) conference you could ever attend: the one and only NormConf, organized by Vicki Boykis.</p> <p>The speakers list was just out of this world, I don't think you can organize a better conference than that on what it does matter on the day to day in the data science ecosystem.</p> <p>If you are curious, all the talks are available on YouTube.</p> <p>But what does this have to do with this blog? Why am I writing about a conference I attended more than a year ago?</p>"},{"location":"blog/2023/12/21/hello-world-/#the-motivation-behind-this-blog","title":"The motivation behind this blog","text":"<p>One of the talk that resonated with me the most was the one by Chris Albon, titled Don't Do Invisible Work. In this talk, Chris explains why it matters to keep track of your work, and how to do it in work environments that don't have a formal system in place for it.</p> <p>A TL;DR of the talk would come from two slides:</p> <p>The problem</p> <p>The problem is that performance reviews, promotions, bonuses, and other evaluations are based on the work they remember. And if they don't remember, you can be evaluated as if you never did it.</p> <p>And people suck at remembering.</p> <p>The solution</p> <ol> <li>Build our own lightweight system for tracking our work.</li> <li>Tell our people about that work.</li> </ol> <p>This is great advice that everyone should follow at work (I am sad to admit I didn't put much effort into that), but I believe it can be applied to other aspects of our life as well. The benefits are not only through the people judging us, but also directly due to the fact that we are forced to reflect on what we have done and explain it to others (or to our future self) with as much clarity as possible.</p>"},{"location":"blog/2023/12/21/hello-world-/#one-year-later","title":"One year later","text":"<p>I was considering starting a blog, or at least a TIL (Today I Learned) section, for a while now.</p> <p>Not that I think I have something particularly interesting to say, but I do believe that writing down what I learn is a great way to consolidate the knowledge and to have a reference point for the future, at least for my future self.</p> <p>Additionally I realized that I hold some (very?) opinionated view on a variety of topics, which I would like to discuss/be confronted about. Yet I never really started to write anything down.</p> <p>The main excuses are that I was in the process of changing jobs, moving from Milan to Berlin, setting everything up, and so on. After that I started to dedicate large part of my free time to side open source projects. But the truth is that I was just lazy.</p> <p>So, one year later, I am finally starting to write down my thoughts and what I learn. I am not sure how often I will be able to write, but I will try to do it whenever I feel like I have something worth sharing, which, as mentioned above, may end up being anything I would like to remember in the future.</p>"},{"location":"blog/2023/12/21/hello-world-/#how-to-set-up-a-blog","title":"How to set up a blog","text":"<p>I am not going to write a tutorial on how to set up a blog, mostly because I have no idea.</p> <p>The only thing I can say is that mkdocs-material blog plugin makes it increadibly easy to set up a blog using mkdocs and integrating with GitHub Pages. Every article is just a markdown file, written in the same way as any other mkdocs page (which is great, because I am already using mkdocs for my open source projects), and the blog plugin takes care of the rest.</p> <p>mkdocs-material is an amazing theme, and I am very happy with it for its simplicity and customizability.</p> <p></p>"},{"location":"blog/2023/12/22/raise-if-prod/","title":"Raise if... \"prod\"\u2757","text":"<p>Last weekend I was meeting with a former colleague of mine and we were discussing about some python code, as one does during a weekend.</p> <p>While going through some high level code and architecture, he explained to me how they are using a python decorator called <code>non_prod_only</code> to raise an exception if a certain piece of code is run in production.</p> <p>The idea is very simple, but effective at the same time. Whenever you decorate a function with <code>@non_prod_only</code>, you prevent your future self (that will be pushing to <code>main</code>) to remember that such functionality shouldn't end up in production.</p> <p>And even if it does, you will get a nice exception that will save you from running the function.</p>","tags":["Python","Decorators","TIL"]},{"location":"blog/2023/12/22/raise-if-prod/#the-decorator","title":"The decorator","text":"<p>Naive implementation of such decorator would be something along the following lines:</p> <pre><code>import os\nfrom functools import wraps\n\ndef is_prod():\n    return os.environ.get(\"ENV\", \"\").lower() in {\"prod\", \"production\"} # (1)\n\ndef non_prod_only(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        if is_prod():\n            raise Exception(\"This function is not allowed in production environment\") # (2)\n        return func(*args, **kwargs)\n    return wrapper\n</code></pre> <ol> <li>Replace with whatever equivalent way you have to detect prod!</li> <li>Please have some imagination and write a much more creative custom <code>Exception</code>!</li> </ol>","tags":["Python","Decorators","TIL"]},{"location":"blog/2023/12/22/raise-if-prod/#the-larger-picture","title":"The larger picture","text":"<p>Now, in the larger scheme of things, a decorator such as <code>non_prod_only</code> is far away from the perfect solution to saving you from all the production troubles.</p> <p>Yet, I still believe that there is a lot of value in abstracting its idea to a more general <code>raise_if</code> decorator, aiming at customization and flexibility.</p> <pre><code>from functools import wraps\n\ndef raise_if(condition, exception = Exception, message = \"\"):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if condition():\n                raise exception(message)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n</code></pre> <p></p> <p>Oh gosh! That's a lot of nested functions! Let's break it down:</p> <ol> <li><code>raise_if</code> is a function that takes a <code>condition</code><sup>1</sup> and returns a decorator</li> <li>The decorator takes a function <code>func</code> and returns a wrapper</li> <li>The wrapper checks the <code>condition</code> and:<ul> <li>raises an <code>exception</code> if it is <code>True</code></li> <li>otherwise, it returns the result of <code>func</code></li> </ul> </li> </ol> <p>If you want to read more about decorators with arguments, I wrote about it in the deczoo documentation.</p>","tags":["Python","Decorators","TIL"]},{"location":"blog/2023/12/22/raise-if-prod/#type-annotation","title":"Type Annotation","text":"<p>Since many people (me included) are big fans of type annotations, let's try to add them to our <code>raise_if</code> decorator:</p> <pre><code>from functools import wraps\nfrom typing import Callable, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n\ndef raise_if(\n  condition: Callable[[], bool],\n  exception: Exception = Exception,\n  message: str = \"\"\n  ):\n    def decorator(func: Callable[P, R]) -&gt; Callable[P, R]:\n        @wraps(func)\n        def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; R:\n            if condition():\n                raise exception(message)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n</code></pre> <p></p> <ol> <li> <p>In this implementation <code>condition</code> is a callable that takes no arguments and returns a boolean value. It is evaluated at runtime, so it can be as complex as you want it to be.\u00a0\u21a9</p> </li> </ol>","tags":["Python","Decorators","TIL"]},{"location":"blog/2023/12/29/2023-rewind-/","title":"2023 Rewind \u23ea","text":"<p>As one does when the end of the year is approaching, I took some time to reflect on the past year.</p> <p>The year started with a big change in my (work) life: I accepted a new data science job at HelloFresh, and relocated to Berlin to start working there. I was very excited about the new challenge, and I was looking forward to working with a new team, in a new environment, and a new country.</p> <p>Germany is no joke when it comes to bureaucracy, and I had to go through a lot of paperwork to get everything in place, and I am among the privileged ones moving from another EU country.</p> <p>I am not going to talk about my job at HelloFresh, maybe I even cannot talk about it due to some NDA, but I can say that I am quite happy with the choice I made, the team I found and I am looking forward to the next year challenges.</p>"},{"location":"blog/2023/12/29/2023-rewind-/#mentoring","title":"Mentoring","text":"<p>One of the most exciting program, that actually weighted in my choice of joining HelloFresh more than one year ago, is the mentoring program in place in the company.</p> <p>Every quarter, a new cohort of mentors and mentees is selected and matched with each other on a wide range of topics. The program is well structured but also very flexible, and it is up to the mentor and mentee to decide how to make the most out of it.</p> <p>Each quarter I joined the program both as a mentor and mentee, and I had the chance to meet and work with some amazing people. In particular during my very first cohort I was lucky enough to be matched with a very experienced mentor - Jamie - who helped me a lot in my personal and professional growth.</p> <p>I know he doesn't like to get any credit, yet to me he was a key factor in my growth this year; we have been matched on python, but soon transitioned to career development - Jamie showed me actionable ways to get where I want to be and pushed me to start working on concrete steps to get there.</p> <p>The topics we discussed were very broad, from how to give and receive feebacks, to how to build a personal brand inside and outside the company, to how to build a longterm career path developing technical and non-technical skills.</p> <p>I am very grateful for the time he spent with me, and how our relationship is still evolving. I am looking forward to keep working with him in the future.</p>"},{"location":"blog/2023/12/29/2023-rewind-/#meetups","title":"Meetups","text":"<p>One of the reason I moved to Berlin in the first place was the amazing tech scene and meetups community. Since I moved here I have been attending a lot of meetups (~1 per week when I am in town), and I had the chance to meet a lot geeks and tech enthusiasts.</p> <p>I figured out this was a great way to meet new people and make new friends in a large city where I didn't know anyone, as well as keeping up with the latest trends and getting inspired by other people's work.</p> <p>This envolvment led me to start helping out PyData Berlin, the local chapter of the PyData community, and I am now part of the organizing team.</p> <p>2024 will be similar in this regard, I will try to attend and organize as many meetups as possible, and the big Pycon &amp; Pydata Berlin conference as well for the first time.</p>"},{"location":"blog/2023/12/29/2023-rewind-/#a-big-conference","title":"A big conference","text":"<p>Talking about PyData and personal branding outside the company, 2023 was the year I gave my first talk at a big conference, namely PyData Amsterdam. I spoke about Bayesian ranking for tennis players, to be honest this was mostly an excuse to get out of my comfort zone and attend the conference, which was a blast.</p> <p>In hindsight, I really cannot recommend it enough, it was by far one of the best experience I had in 2023 related to my career. I cannot count how many people I met, how many friends and connections I made, how much I learned, and how many ideas I got in two and a half days.</p> <p>Last but not least I got to meet a lot of people I only knew from social media and online communities, who, without their knowing, shaped my career and my interests in the past years. Having the chance to tell them in person how much I appreciate their work and how much they inspired me was quite an experience.</p> <p>I am looking forward to attend more conferences in 2024, and to give more talks as well.</p>"},{"location":"blog/2023/12/29/2023-rewind-/#open-source","title":"Open Source","text":"<p>During this year I started to contribute more and more to open source projects. This actually started in 2022, but it was in 2023 that I got more consistent and involved in the community.</p> <p>I slowly realized that building and maintaining tools that other developers use is something I really enjoy doing and find incredibly rewarding. This is true both for the tools colleagues use at work, and for the tools that the community uses.</p> <p>On some tools I started to develop and now maintain, the year started with a library called compclasses that I wrote to simplify the implementation of composition over inheritance in python.</p> <p>Then I needed a way to backtest time series models with folds that are time based instead of index based, so I wrote timebasedcv.</p> <p>Finally, at HelloFresh a lot of work is based on (custom) iso weeks, and I couldn't find a library that was able to satisfy our needs, therefore I wrote iso-week-date, and I am quite happy with the final result.</p> <p>In the meanwhile, the contributions I am most proud of are the ones I made to dirty-equals and scikit-lego.</p> <p>Talking about scikit-lego, in Amsterdam I had the chance to meet Vincent D. Warmerdam and Matthijs Broun, the creators of the library, and I convinced them that I could help them maintaining the library, and so they granted me the maintainer status.</p> <p></p>"},{"location":"blog/2024/01/23/global-gitignore/","title":"Global <code>.gitignore</code>","text":"<p>I was today years old when I learned about the possibility of setting a global <code>.gitignore</code> file.</p> <p>Are you annoyed by people (mostly yourself) adding random files/patterns to repository <code>.gitignore</code> file, such as editor configuration files, temporary files, or tool caches?</p> <p>Say no more! You can set a global <code>.gitignore</code> file that will be used everywhere.</p> <p>The steps are really simple:</p> <ol> <li> <p>Create a <code>.gitignore</code> file, typically in your home directory:</p> <pre><code>touch ~/.gitignore\n</code></pre> </li> <li> <p>Open you favourite editor and add to such <code>.gitignore</code> file whatever file, folder and pattern you always want to ignore.</p> <p>My personal configuration looks something like this:</p> <pre><code>.vscode\n.env\n**/*.log\n**/dev_nb.ipynb  # (1)\n_typos.toml  # (2)\n\n# caches\n.mypy_cache/\n.ruff_cache/\n</code></pre> <ol> <li>This is a notebook I typically have and use for development, exploration and experimentation. I don't want to commit it to the repository.</li> <li>Settings for typos: source code spell checker</li> </ol> </li> <li> <p>Make git aware of such global configuration by setting the <code>core.excludesFile</code> property to the path of the <code>.gitignore</code> file you just created:</p> <pre><code>git config --global core.excludesFile ~/.gitignore\n</code></pre> </li> <li> <p>That's it, you are set and done! \ud83c\udf89</p> </li> </ol> <p>From now on, every time you run a git command the files and patterns you added to the global <code>.gitignore</code> file will be ignored.</p> <p>Happy coding! \ud83d\ude80</p> <p></p>","tags":["git","TIL"]},{"location":"blog/2024/01/29/an-ode-to-simplicity/","title":"An Ode to Simplicity","text":"<p>The first section of my resume (summary) goes something like following:</p> <p>[...] I tend to prefer simple, scalable and understandable solutions as opposed to overcomplex models when not necessary to bring value to the business.</p> <p>I recently got to know that such a statement was the one that caught my current manager attention and made him decide to interview me in the first place.</p> <p>In an era, and a field, where technological landscapes are evolving at an unprecedented pace, it's easy to get swept away by the allure of intricate frameworks, elaborate algorithms, and complex architectures; namely the today's hype.</p> <p>However, the seasoned engineer should understand that simplicity is not merely a design choice; it's a philosophy that can transform the way we approach and solve problems.</p>"},{"location":"blog/2024/01/29/an-ode-to-simplicity/#simple-does-not-mean-easy","title":"Simple does not mean easy","text":"<p>Let's start from the criticism stating that <code>simple==easy</code>, and why it is just not true. We need to begin by defining what I mean by simple and why it is not a synonym of easy.</p> <p>Simplicity is often misunderstood as an approach that takes less effort, cuts corners and avoids tackling the hard problems, namely easiness.</p> <p>In reality, simplicity requires to understand a problem at his core essence and to deconstruct it into its fundamental components.</p> <p>This doesn't imply avoiding complexity where it is necessary; rather, it means understanding the complexity and encapsulating it in a way that is manageable and comprehensible.</p> <p>Complexity is not the enemy</p> <p>In my experience, simplicity gets often overlooked because of two extremes:</p> <ul> <li>It is confused with easiness, and therefore it is seen as a synonym of laziness, not worth achieving or not worth selling.</li> <li>It is too hard to achieve, either due to lack of time or incompetence (lack of knowledge).</li> </ul>"},{"location":"blog/2024/01/29/an-ode-to-simplicity/#the-power-of-simplicity","title":"The power of simplicity","text":"<p>Whenever starting a project, I ask myself the following question:</p> <p>What's the simplest possible thing that might work? (1)</p> <ol> <li>From Joel Grus talk at Normconf: What's the simplest possible thing that might work, and why didn't you try that first?</li> </ol> <p>This question encapsulates the essence of simplicity in problem-solving. We should recognize that it is not uncommon that complexity arises from overengineering solutions or incorporating unnecessary features when do not serve a purpose.</p> <p>By consistently asking ourselves, \"What is the simplest thing that might work, for now and for the future?\" we ensure that our solutions are both effective and efficient.</p> <p>Simplicity is not a one-time decision but an ongoing commitment, iterative and incremental development process. By regularly revisiting the question of what constitutes the simplest working and scalable solution, we avoid unnecessary complexity and maintain a flexible and adaptive development approach.</p>"},{"location":"blog/2024/01/29/an-ode-to-simplicity/#pareto-principle","title":"Pareto Principle","text":"<p>If you don't believe me, believe the Pareto Principle, also known as the 80/20 rule.</p> <p>The Pareto Principle, is a guiding principle that resonates deeply with the simplicity approach and mindset.</p> <p>It postulates that, in many situations, roughly 80% of the effects/results come from 20% of the causes. In the context of software development and data science, this principle encourages us to focus on the critical components that yield the most significant impact.</p> <p>It serves as a powerful tool for decision-making, guiding us to invest our energy where it matters most and it is most convenient to allocate time and resources: such 20%.</p> <p>Nevertheless, it requires a key preliminary step: breaking down the problem complexity into its fundamental components and identifying the key features that drive the majority of value.</p>"},{"location":"blog/2024/01/29/an-ode-to-simplicity/#examples-in-data-science","title":"Examples in Data Science","text":"<p>In the dynamic world of data science, simplicity is the key to unlocking actionable insights from vast and complex datasets. The ability to distill complex analyses into clear, understandable results is a skill that sets the exceptional data scientist apart.</p> <p>While cutting-edge algorithms and sophisticated models have their place for many application, I often felt a sense of pride and elegance in choosing the right tool for the task at hand. Often, simple models can outperform complex ones, in terms of computational efficiency, results, maintainability and interpretability.</p> <p>If those reasons are not enough, it is still best practice to start with a baseline model and then iterate on it by adding complexity.</p> <p>As concrete example of simplicity in data science, I would like to mention an amazing keynote by Dr. Robert Erdmann at PyData Amsterdam 2023: Python for Imaging and Artificial Intelligence in Cultural Heritage. Very well invested ~35 minutes of your time, you won't regret a second of it.</p> <p>During the keynote is Dr. Erdmann made me feel quite uncomfortable for how embarrassingly well he manages to break down complex problems into simple ones, solve them individually and then combine them together to solve the original problem.</p> <p>Sadly, the Q&amp;A part was not recorded, but he got asked how he manages the vectors (embeddings) of the images to do similarity search. I imagine that the audience was expecting suggestions for which fancy vector database to adopt, but the answer was quite the opposite: he does not use any vector database, he simple stores embeddings as numpy/torch arrays in memory and manages to do exact similarity search in a few milliseconds.</p> <p>I find this to be the perfect examplification of what I mean by simplicity in data science.</p>"},{"location":"blog/2024/01/29/an-ode-to-simplicity/#unix-philosophy","title":"Unix philosophy","text":"<p>As last but not least mention, consider the Unix philosophy, a timeless testament to the power of simplicity. Its core tenets \u2013 \"Do One Thing and Do It Well\" and \"Write Programs to Work Together\" \u2013 have inspired generations of developers. By adhering to these principles, we create modular, easily understandable code that stands the test of time.</p>"},{"location":"blog/2024/01/29/an-ode-to-simplicity/#conclusion","title":"Conclusion","text":"<p>Embracing simplicity is more than just a development methodology; it's a mindset that permeates our approach to problem-solving. I question myself about the necessity of complexity at every turn. Is there a simpler solution? Can we achieve the same results with fewer moving parts?</p> <p>The pursuit of simplicity requires discipline and a commitment to constant refinement. It's about finding the delicate balance between innovation and pragmatism, pushing the boundaries of what's possible while staying grounded in the fundamentals that make our systems reliable and scalable.</p> <p>In conclusion, simplicity is not a compromise; it's a strategic choice that empowers us to build resilient, efficient systems in the ever-evolving landscape of technology.</p> <p>We should celebrate the elegance that simplicity brings to our craft, ensuring that our solutions stand the test of time.</p>"},{"location":"blog/2024/01/29/an-ode-to-simplicity/#extra-the-zen-of-python","title":"Extra: The Zen of Python","text":"<p>Let's do not forget about the Zen of Python:</p> <pre><code>python -c 'import this' | head -n 6\n</code></pre> <pre><code>The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\n</code></pre> <p></p>"},{"location":"blog/2024/03/24/the-code-review-chronicles-in-industry/","title":"The Code Review Chronicles (in industry)","text":"<p>Since I joined HelloFresh, I have been involved in a significant number of code reviews since the very first day at the company.</p> <p>As code reviews are a fundamental part of software development process and take a large part of my day to day, I immediately started to take it very seriously.</p>"},{"location":"blog/2024/03/24/the-code-review-chronicles-in-industry/#introduction","title":"Introduction","text":"<p>I will share some of my thoughts on the code review process within an industry setting, focusing on its significance in delivering robust, business-driven solutions.</p> <p>What I will not explore are:</p> <ul> <li>Open-source projects, where dynamics may differ, and have a different set of rules, meta rules and expectations from all the parties involved.</li> <li>Shallow PRs, where the changes are minimal or trivial.</li> </ul> <p>I will focus on the more complex PRs, where the changes are significant and actually matter such as new features, logics alteration, refactoring, etc..</p> <p>Please note that my insights are based on personal experiences and most likely vary across teams and organizations. Nevertheless, I aim abstract some principles applicable in most scenarios.</p>"},{"location":"blog/2024/03/24/the-code-review-chronicles-in-industry/#the-good","title":"The good","text":"<p>As mentioned already, there should be no discussion around the fact that code reviews are a fundamental part of the software development process. They are a way to ensure that the code is of high quality, maintainable and (possibly?) bug free deployments.</p> <p>Personally they should also ensure that the code is consistent with the rest of the codebase, and that it follows the best practices of the team.</p> <p>CI Tools</p> <p>Please don't trust reviewers for some of these such practices, adopt CI tools that can check for you instead. This will save time as well as mental effort to everyone involved.</p> <p>Code reviews are also a way to share knowledge and to learn from others. Matter of fact this has been my primary goal for the first few months in the company. While getting tagged in PRs I had the opportunity to learn about the project, the codebase, the architecture and everything else that was relevant.</p> <p>At the same time, I was bringing a fresh pair of eyes to the codebase, asking a lot of question on the design choices that were made, and suggesting improvements where I thought they were needed, or at least low hanging changes that could be done to improve the codebase or the reviewers experience.</p> <p>Code reviews, as well as other practices such as pair programming, allows the reviewer to step back from the code and see the bigger picture from above. This is a great way to spot potential issues that the author might have missed in the moment of generating the code.</p> <p>Self review</p> <p>If you use a PR template, make sure to add a bullet point asking for self review. If the author takes this seriously and does a self review before asking for a review, the PR will generally be of higher quality and the reviewer will have a better time reviewing it.</p> <p>Possibly take a break before doing the self review, to have a somewhat fresh view on the code.</p>"},{"location":"blog/2024/03/24/the-code-review-chronicles-in-industry/#the-bad","title":"The bad","text":"<p>A part of me consider the code review process very necessary, yet not always quite impactful as it could or should be.</p> <p>Let me explain: when a new feature or a bug fix is requested by the business, the first thing that happens is that the author starts to work on it.</p> <p>Possibly this is the first time that the author is thinking about the feature, however the requests may come in many different forms:</p> <p>The requests</p> <p>PlEaSe add tHiS fEaTuRe ASAP!</p> <p>The toOl Is not working!</p> <p>I neED iT... fOr YeStErDaY</p> <p>Sounds familiar?</p> <p>Given the nature of the business, it is not uncommon that the features are not discussed in depth before somebody picks them up. This is not necessarily a bad thing, as the business needs to move fast and the developers need to be able to pick up tasks and work on them quickly. However there are a few drawbacks to this approach:</p> <ol> <li>The code review could become the first time that the reviewers (aka colleagues) see the code, and the first time that can give feedback on it.</li> <li>Rushed implementations may result in suboptimal solutions, introducing or perpetuating inefficiencies within the codebase. These are often introduced as quick patch, but that will stay there for a long time.</li> <li>Limited opportunity for feedback during the review phase inhibits course correction. If the reviewer has some deep feedbacks, code review may seem to be too late to raise concerns and ask for a different approach or re-design a feature. As the code is already there, and the author has already spent time on it, and the business is waiting for it.</li> </ol> <p>On a single instance, this is not a big issue, but as it keeps happening over and over a few problems start to arise:</p> <ul> <li>Suboptimal decisions compound over time.</li> <li>The codebase will become harder and harder to maintain and develop when introducing new features, fixing bugs, testing and so on..</li> <li>Refactoring will get exponentially more difficult and time consuming.</li> </ul> <p>This is a problem that I have seen many times, and I am not sure how to solve it. Personally I believe it should be solved at the root, by having a better process in place to discuss and plan features development before they are picked and implemented.</p>"},{"location":"blog/2024/03/24/the-code-review-chronicles-in-industry/#the-ugly","title":"The ugly","text":""},{"location":"blog/2024/03/24/the-code-review-chronicles-in-industry/#nitpicks","title":"Nitpicks","text":"<p>Nitpicks! Let's be honest, that's the ugly part of code reviews!</p> <p>Nitpicks are not necessarely bad, but they are certanly ugly. Here what I mean by that: nitpicks are small, almost trivial changes that the reviewer suggests to the author, that are not really necessary to improve the codebase, but that are more a matter of personal preference or style. If they become too many, they may end up overwhelm the author with too many changes and overshadow the important issues that the code has.</p> <p>I try to avoid having too many nitpicks, however there is at least one category I can always forgive myself for: variable naming and consistency.</p> <p>To me this is not a trivial part of the code and the author should carefully choose variable names to make the code more readable and understandable. If I see a variable name that is not clear or inconsistent with the rest of the code, I will suggest a change.</p>"},{"location":"blog/2024/03/24/the-code-review-chronicles-in-industry/#time","title":"Time","text":"<p>Code reviews take time, and sometimes a lot of time if take seriously. This can be a problem, especially in a small team where everybody is busy with their own tasks and the code reviews are not the only thing they have to do.</p> <p>What works well for me it to to set 1-1.5 focus hours at the start of the day before the daily standup to review PRs, so that colleagues are not stuck on a task waiting for a review.</p> <p>I would consider ugly when someone has to wait for a review for a long time, especially if the PR is blocking other tasks or deployments.</p>"},{"location":"blog/2024/03/24/the-code-review-chronicles-in-industry/#lack-of-description","title":"Lack of description","text":"<p>This is something I am guilty of, but I am trying to improve. When submitting a PR, try to add a detailed description that explains what the PR is about and provide the context for reviewers to understand what is happening and why, as well as what are the potential issues that they should look for.</p> <p></p>"},{"location":"blog/2024/04/14/6-months-of-playing-with-lego-bricks-/","title":"6 months of playing with lego bricks \ud83e\uddf1","text":"<p>No I am not talking about the physical legos. Although as a kid I truly loved playing with them, I am talking about collaborating in the maintenance and development of scikit-lego.</p>"},{"location":"blog/2024/04/14/6-months-of-playing-with-lego-bricks-/#how-it-started","title":"How it started","text":"<p>If I remember correctly I got to know the library directly from a talk by Vincent at PyData Eindhoven 2019, and in 2020 scikit-lego was providing a couple of features I was looking for, namely:</p> <ul> <li><code>IdentityTransformer</code> which just passes the data through, useful for pipelines, before <code>remainder=\"passthrough\"</code> was a thing in scikit-learn.</li> <li><code>GroupedPredictor</code> a meta-estimator that fits a separate estimator for each group in the input data.</li> </ul> <p>I was starting out in my career and certainly I was not confident enough to contribute to open source projects, at best I was reporting issues when I found them in OSS libraries. Nevertheless I often found/find myself looking up at the source code of the libraries I use, trying to understand how specific features work and how they are implemented.</p> <p>This is certainly not necessary, but it works for me as a way to learn and understand better the tools I use when in doubt about something. Sometimes it is even faster than reading the documentation in search of edge cases.</p> <p>Now having a bit more experience and confidence, as well as being a scikit-lego user for a few years, I found myself answering a couple of questions in the issue section of the repository.</p> <p>Until we got to the point in which Vincent gently offers to bother him at PyData Amsterdam 2023:</p> <p></p> <p>which I certainly did. That started a conversation with Vincent and Matthijs, the two creators of scikit-lego, which led to being invited as a project maintainer.</p> <p>This is not an article about OSS (maybe I will write one in the future), all I want to say on the reasons why I (kind of) activately searched for such opportunity: I enjoy the process of building and maintaining developers tools, and until that point my target audience has never been larger than my company for internal work, and a handful of people in the open source community.</p> <p>scikit-lego was a chance to maintain a library that has a fairly large reach in the data science community, yet it is not too big that I would feel overwhelmed by the amount of tech debt before being able to contribute, nor that the responsibility and pressure to maintain it would be too high. It honestly felt like the perfect opportunity to start contributing to a project that I use and love.</p>"},{"location":"blog/2024/04/14/6-months-of-playing-with-lego-bricks-/#the-first-few-contributions","title":"The first few contributions","text":"<p>When I joined as a mainter the codebase had roughly ~7k lines of codes, and until that moment I had been mostly a user, and certainly I was not aware of most of the features or details of the library.</p> Codebase size <pre><code>git clone https://github.com/koaning/scikit-lego\ncd scikit-lego\ngit checkout c1d413e8ae24350527f3b5bafa7d55b82e95c0cb # roughly the last commit before I joined\nfind sklego -name '*.py' | xargs wc -l | grep total\n</code></pre> <pre><code>7051 total\n</code></pre> <p>The first good opportunity to contribute and explore the library in more detail was made possible by a few rendering bugs in the documentation, caused by a mixed style of numpy and sphinx usage in the docstrings. I felt like the docs were deserving more love and attention, and that was a low hanging fruit to start learning more about features I never used before.</p> <p>That played out quite well (for me \ud83d\ude07 <sup>1</sup>):</p> <ul> <li>I discovered a few cool features I was not aware of.</li> <li>I learned more about the implementation details of the library.</li> <li>Finally, I was able to make a list of features I wanted to implement in the future as well as a list of issues I wanted to tackle.</li> </ul>"},{"location":"blog/2024/04/14/6-months-of-playing-with-lego-bricks-/#my-favourite-feature","title":"My favourite feature","text":"<p>Up to recent times, my favourite feature remained the <code>GroupedPredictor</code> meta-estimator, which I found very useful in multiple projects I worked on.</p> <p>That was until... a quite relevant bug was reported by a user.</p> <p>The TL;DR of the bug is: the class is not working as expected in classification tasks if the <code>GroupedPredictor</code> is initialized with some set of parameters (when shrinkage is used).</p> <p>That led to a deep dive into the codebase, some debugging, and a few discussions, as while taking a look at the code I realized that further improvements could be made to the class. To mention the most relevant ones:</p> <ul> <li>Parallel fitting of the estimators for each group.</li> <li>Fallback methods to the first available parent group instead of a global model.</li> </ul> <p>However, that would have led to either a huge breaking change in the API or a messy implementation of if-else cases, which would have been hard to both maintain and clearly explain in full detail in the documentation. Therefore, we decided to move forward with an entire new class and implementation from scratch.</p> <p>Enter the <code>HierarchicalPredictor</code> class \ud83c\udf89</p> <p>This is a more flexible and capable (and so far bug free) base class that implements the improvements just mentioned and from which two task specific classes, <code>HierarchicalClassifier</code> and <code>HierarchicalRegressor</code>, inherit.</p> <p>For these reasons, I had to change my mind on what my favourite feature is \ud83d\ude09</p>"},{"location":"blog/2024/04/14/6-months-of-playing-with-lego-bricks-/#the-best-part-of-it-all","title":"The best part of it all \u2728","text":"<p>Personally there are a few good reasons why I love to work on this project.</p> <p>scikit-lego allows to implement features that may appear to be very experimental, yet they have a somewhat clear use case in practice. This kind of freedom in thought and implementation is something I value a lot, and it is not always possible.</p> <p>Secondly we move fast calmly and (may) break things:</p> <ul> <li>Calmly because there is no pressure to release a new version every day-week-month. We release whenever new features are implemented, and there is no deadline to meet for that.</li> <li>Break things, we actually try not to, yet sometimes it happens if that means we can improve the codebase.</li> </ul>"},{"location":"blog/2024/04/14/6-months-of-playing-with-lego-bricks-/#conclusion","title":"Conclusion","text":"<p>If you are a data scientist or ML engineer, I believe we have a lot of cool features and neat tricks to offer you.</p> <p>And if you like building tools for other developers, I believe scikit-lego is a great place to start.</p> <p>Happy coding! \ud83d\ude80</p> <p></p> <ol> <li> <p>Vincent had to review two not so nice PRs of mine: #586 and #589 \u21a9</p> </li> </ol>"},{"location":"blog/2024/05/07/pytest-does-not-raise/","title":"Pytest: does not raise","text":"<p>If you took the wise decision to test your codebase, you probably stumbled upon pytest as the defacto tool that offers a large suite of features and extensions.</p> <p>However, there is a neat trick I like to use when testing, and I often get the \"Wow! TIL about that!\" reaction when introducing it.</p> <p>Let's start with the basics and build upon on why you may want to use such trick in the first place.</p>"},{"location":"blog/2024/05/07/pytest-does-not-raise/#parametrization","title":"Parametrization","text":"<p>Pytest allows to parametrize tests i.e. \"allows one to define multiple sets of arguments and fixtures at the test function or class\".</p> <p>Let's see a naive example in which we pass a set of three different inputs <code>(a, b, expected)</code>:</p> <pre><code>import pytest\n\n\ndef my_sum(a, b):  # (1)\n  \"\"\"Sums a and b\"\"\"\n  return a+b\n\n\n@pytest.mark.parametrize(\n    \"a, b, expected\",\n    [\n        (1, 2, 3),\n        (\"1\", \"2\", \"12\"),\n        ((1,2), (3,4), (1,2,3,4)),\n    ],\n)\ndef test_sum(a, b, expected):\n    \"\"\"Tests expected behavior\"\"\"\n    assert my_sum(a, b) == expected\n</code></pre> <ol> <li>A very fancy function, am I right?!</li> </ol> <p>This way of defining function inputs and expected output is quite typical, and it avoids to write a test for each input.</p>"},{"location":"blog/2024/05/07/pytest-does-not-raise/#testing-exceptions","title":"Testing Exceptions","text":"<p>There are times you want to test that a given exception is raised if a certain condition is met. pytests allows to check for that as well</p> Testing Exception<pre><code>@pytest.mark.parametrize(\n    \"a, b, expected\",\n    [\n        (1, \"2\"),\n        (1, (1,2)),\n        (\"a\", (3,4)),\n    ],\n)\ndef test_type_error(a, b):\n    \"\"\"Tests TypeError is raised\"\"\"\n    with pytest.raises(TypeError):\n        my_sum(a, b)\n</code></pre> <p>This is fine, so what's the issue with it?</p> <p>There are cases in which you would like to test different types of error, ending up creating a single test function for each case. To avoid the infinite growth of test functions, one can parametrize the <code>Exception</code> as well (I will show that in a moment).</p> <p>But wouldn't it be nice and clean if also the expected behavior case could be treated in the same way instead of having a different test function? Say no more! Enter: <code>does_not_raise</code>.</p>"},{"location":"blog/2024/05/07/pytest-does-not-raise/#does_not_raise-context","title":"<code>does_not_raise</code> context","text":"<p>Some public apologies</p> <p>I really tried to dig deep to find when and how I came across this trick in the first place, but I couldn't manage to figure it out. I am honestly sorry for that \ud83d\ude1e</p> <p>Given the above behavior, all we need is a context that does... literally nothing! Lo and behold, python standard library offers that as contextlib.nullcontext.</p> <p>Let's rewrite the two example above as a unique test:</p> Unique suite<pre><code>from contextlib import nullcontext as does_not_raise\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"a, b, expected, context, err_msg\",\n    [\n        (1, 2, 3, does_not_raise(), \"\"),\n        (\"1\", \"2\", \"12\", does_not_raise(), \"\"),\n        ((1, 2), (3, 4), (1, 2, 3, 4), does_not_raise(), \"\"),\n        (1, \"2\", None, pytest.raises(TypeError), \"unsupported operand type\"),\n        (1, (1, 2), None, pytest.raises(TypeError), \"unsupported operand type\"),\n        (\"a\", (3, 4), None, pytest.raises(TypeError), \"unsupported operand type\"),\n    ],\n)\ndef test_sum(a, b, expected, context, err_msg):\n    \"\"\"Tests `my_sum` function\"\"\"\n\n    with context as exc_info:\n        assert my_sum(a, b) == expected\n\n    if exc_info:  # (1)\n        assert err_msg in str(exc_info.value)\n</code></pre> <ol> <li><code>exc_info</code> contains the error message generated inside the context. Thereafter we check that some message is contained in there.</li> </ol> <p>I don't know about you, but I find it significantly simpler and cleaner to be able to keep all the cases and functionalities, including exceptions, of a given function or methods within the same parametrization.</p> <p>Why <code>does_not_raise</code></p> <p>The only reason to import <code>nullcontext</code> as <code>does_not_raise</code> is to keep the verb somewhat aligned with the <code>pytest.raises(...)</code> context \ud83d\ude01</p> <p></p>"},{"location":"blog/2024/12/08/we-won-a-hackaton-/","title":"We won a hackaton \ud83c\udfc6","text":"<p>Two weeks ago, I had the incredible opportunity to participate in NumHack 2024 alongside Jurij Wollert and Fabrizio Damicelli ... and to our amazement, we won 1st place in the Build Category \ud83e\uddf1</p> <p>We came for the fun, we stayed for the challenge, and we left with the prize \ud83c\udfc6</p> <p>Tip</p> <p>Spoiler alert: If you want to get a sense of the final outcome before reading the rest of the post, you can watch the video submission we prepared.</p>"},{"location":"blog/2024/12/08/we-won-a-hackaton-/#the-challenge","title":"The challenge","text":"<p>The long story short is that the hackton had two axis: the what and the how.</p> <p>The what breaks down into Global Impact, Open Source &amp; AI Accessibility, AI Innovation &amp; Productivity.</p> <p>The how breaks down into the following categories: Build, Train, and Analyze.</p> <p>Before the event started we did not have a clear idea of where we would end up in the matrix, and we were open to pretty much anything as long as:</p> <ul> <li>We would have fun.</li> <li>We would end up learning something.</li> <li>Our outcome would have been something tangible, and more than just an idea.</li> </ul> <p>Given these constraints, I knew in the back of my mind that Global impact was the most appealing to me to break out of what I usually do, and that the Train category would have been a stretch given our skillset and the time at our disposal.</p>"},{"location":"blog/2024/12/08/we-won-a-hackaton-/#the-idea","title":"The idea","text":"<p>As the hackaton kicked off, we brainstormed ideas for a good chunk of the first half day. Fabrizio had a great take in keeping everything very, very, high level; yet at the same time for each proposal, we would ask ourselves:</p> <ul> <li>Is this something that we would be proud of?</li> <li>What's the impact of it?</li> <li>How would an implementation look like in practice?</li> </ul> <p>After a few iterations (read as: 2 hours of almost nosense), Fabrizio came up with two good candidates we all liked:</p> <ol> <li>Analyze how the politicians in the EU are acting with respect to policies, versus what they are saying or their party is promoting. The idea would have built on top of howtheyvote.eu project.</li> <li> <p>Empowering communities to build better cities, through:</p> <ul> <li>A mobile app in which citizens can report issues to the local authorities, and keep track of the status of the issue.</li> <li>A platform for the local authorities to manage and analyze the issues reported.</li> </ul> </li> </ol> <p>Info</p> <p>This idea actually originated from Fabrizio's friend Juan Severino, which we contacted to ask for permission to build on such idea.</p> <p>We decided to go with the second idea, as it was going to check more boxes in what we were looking for in the challenge: namely, such application would resonate with everyone globally, we knew how to build it, and machine learning would have helped in the automation of the process.</p>"},{"location":"blog/2024/12/08/we-won-a-hackaton-/#the-hacking","title":"The hacking","text":"<p>Let's start from the obvious: none of us knows how to make a mobile app, therefore, we decided to go with a webapp only - as a mockup - also for the citizen side.</p> <p>Most of the implementation details were required for the submission, and I will not repeat them here. If you are interested, you can read the details in the project page on github: the README file is quite detailed, and it includes high level description, core features, how to get started and the tech stack we used.</p> <p>Here I want to mention a few takeaways from the hacking and coding part itself.</p>"},{"location":"blog/2024/12/08/we-won-a-hackaton-/#the-good","title":"The good","text":"<ul> <li>We were able to split the work very well in modular tasks, and we were able to work on them in parallel. This helped us to be quite productive, and to have a working prototype (with quite a few placeholder values) at the end of the first day.</li> <li>We learned a bunch of new things on CLIP embeddings model to compare text and images, and we were able to integrate it in the project in a meaningful way. Kudos to sentence-transformers library for the amazing work they do.</li> <li>We were able to experiment with some python libraries that otherwise we don't use on a daily basis, and we were able to learn a few things about them.</li> </ul>"},{"location":"blog/2024/12/08/we-won-a-hackaton-/#the-ugly","title":"The ugly","text":"<ul> <li>Jurij and I spent way too much time on how to move bytes between frontend and backend. We learned a good lesson, yet that took the best part of the first evening.</li> <li>Similarly, we invested a lot of time to make docker-compose work. At the end of the day this was a nice to have. Yet I tend to obsess over these things. On the flip side, now everyone can run the project locally by running literally one command.</li> </ul>"},{"location":"blog/2024/12/08/we-won-a-hackaton-/#the-bad","title":"The bad","text":"<ul> <li>Ok the obvious one: we did not have a mobile app developer nor any experience with that. And we knew it from the beginning. Yet we did the smart choice of not trying to learn it on the fly. I think that would end up being a wast of time for what one of use could have achieved in less than 72 hours.</li> <li>Similarly, we did not have a designer to advise us how to make the application look aesthetically pleasing. We did our best, yet we know that the application is not the most beautiful thing you have ever seen.</li> </ul> <p>In general, we could have had a more diverse team in terms of skills, yet again, we were there for the fun and the learnings.</p>"},{"location":"blog/2024/12/08/we-won-a-hackaton-/#the-future","title":"The future","text":"<p>So what's next? The real answer is that we don't know.</p> <p>I personally really like the idea and the project, and I would like to further develop it. Yet, some of the shortcomings we had during the hackaton won't cease to exists in the near future, in particular none of us is a designer nor particularly interested in becoming a mobile app developer.</p> <p>On the flip and positive side, I can see myself sporadically working on the project to improve the machine learning part. We barely scratched the surface of what we could have done with vision models, and I am sure that there is a lot of room for improvement. Some of the ideas are exposed in the project page, and I am looking forward to working on them.</p> <p>In the meantime, I am looking forward to the next hackaton, and to the next opportunity to work with Jurij and Fabrizio. We had a blast \ud83d\ude09</p>"},{"location":"blog/2024/12/08/we-won-a-hackaton-/#extras","title":"Extras","text":"<p>A big shoutout to NumFocus for organizing the hackaton, and to the sponsors. The event was incredibly well organized. I am looking forward to the next edition.</p> <p></p>"},{"location":"blog/2025/07/20/stop-context-switching-how-git-worktree--uv-revolutionized-my-python-workflow/","title":"Stop Context-Switching: How Git Worktree + UV Revolutionized my python workflow","text":"<p>If you've ever found yourself frantically stashing changes, switching branches, and losing your mental context just to review a pull request or work on a quick hotfix, you know the pain.</p> <p>For Python developers, this was made even worse by the overhead of managing virtual environments. But the combination of <code>git worktree</code> and <code>uv</code> has completely changed the game.</p>"},{"location":"blog/2025/07/20/stop-context-switching-how-git-worktree--uv-revolutionized-my-python-workflow/#the-python-developers-nightmare","title":"The python developer's nightmare","text":"<p>Picture this: you're deep in the zone, refactoring a complex piece of code. Your virtual environment is active, your IDE has multiple files open, and you're making great progress. Then your teammate asks you to review their PR that uses different dependencies, or production breaks and you need to create a hotfix, or your open source project has an issue with a different python version, or a library just got an update you need to test.</p> <p>The traditional Python workflow was brutal:</p> <ol> <li>Deactivate your current virtual environment</li> <li>Stash or commit your work-in-progress with some meaningless message</li> <li>Switch branches</li> <li>Create a new virtual environment</li> <li>Install all dependencies</li> <li>Lose all your IDE context (open files, breakpoints, etc.)</li> <li>Do the review/hotfix</li> <li>Reverse the entire process to get back to your work</li> </ol> <p>This wasn't just context-switching, it was context obliteration.</p> <p>The alternative I have seen multiple times is to have different clones of the same repo, which can get quite impractical to manage very quickly.</p> <p>With separate clones, you lose the shared git history, waste disk space, and have to manually keep remotes in sync - worktrees solve all of these issues while keeping everything under one repository umbrella.</p>"},{"location":"blog/2025/07/20/stop-context-switching-how-git-worktree--uv-revolutionized-my-python-workflow/#enter-git-worktree","title":"Enter <code>git worktree</code>","text":"<p><code>git worktree</code> solved half the problem. It lets you check out multiple branches of the same repository simultaneously, each in its own directory:</p> <pre><code># Create a new worktree for the hotfix\ngit worktree add ../myproject-hotfix main\n\n# Your directory structure now looks like:\n# myproject/          (your current branch + venv)\n# myproject-hotfix/   (main branch, but no venv yet...)\n</code></pre> <p>This gives you a clean separation where each worktree operates independently, with different branches checked out yet same git history. No more losing your place when switching contexts!</p> <p>But there is (well actually was) still a problem: if you need a virtual environment (and don't want to mess around with the main repo one), you will need to create a new one on each worktree.</p> <p>This process was painfully slow:</p> <pre><code>cd ../myproject-hotfix\npython -m venv .venv          # at least a few seconds\nsource .venv/bin/activate\npip install -e .              # probably a few minutes\npip install pytest coverage   # more waiting time\n</code></pre> <p>By the time you finished setting up the environment, you'd lost your flow state anyway.</p>"},{"location":"blog/2025/07/20/stop-context-switching-how-git-worktree--uv-revolutionized-my-python-workflow/#uv-changes-everything","title":"<code>uv</code> changes everything","text":"<p>Then <code>uv</code> came along and made this workflow actually practical. UV's speed and intelligent caching transformed worktrees from \"theoretically useful\" to \"absolutely essential.\"</p> <p>Here's the same workflow with <code>uv</code>:</p> <pre><code>cd ../myproject-hotfix\nuv venv                         # can't even blink\nsource .venv/bin/activate\nuv pip install -e .             # essentially instant if cached\nuv pip install pytest coverage\n</code></pre> <p>What used to take minutes now takes under a second. The difference is game-changing.</p>"},{"location":"blog/2025/07/20/stop-context-switching-how-git-worktree--uv-revolutionized-my-python-workflow/#the-modern-python-workflow","title":"The modern python workflow","text":"<p>I recently started to experiment with just recipes, and I set up a global recipe called <code>worktree</code> that takes as input:</p> <ul> <li>a branch name</li> <li>a python version (optional)</li> </ul> <code>~/.justfile</code> <pre><code>[doc(\"\"\"\nCreate a new git worktree with Python virtual environment setup.\n\nExamples:\n\n* Create worktree for branch 'feature/foo-bar' with Python 3.11\njust worktree feature/foo-bar 3.11\n\n* Create worktree for branch 'hotfix/bug-123' with Python 3.12\njust worktree hotfix/bug-123 3.12\n\n* Create worktree for branch 'develop' with default Python (3.12)\njust worktree develop\n\"\"\")]\nworktree branch python=\"3.12\" working_dir=invocation_directory():\n    #!/bin/bash\n    set -euo pipefail\n\n    # Change to the directory where just was invoked\n    cd \"{{working_dir}}\"\n\n    # Get current directory name\n    current_dir=$(basename \"${{working_dir}}\")\n\n    # Create worktree path: ../&lt;current-folder-name&gt;-&lt;branchname&gt;\n    # Replace forward slashes in branch name with dashes for directory name\n    safe_branch=$(echo \"{{branch}}\" | sed 's/\\//-/g')\n    worktree_path=\"../${current_dir}-${safe_branch}\"\n\n    echo \"Creating git worktree for branch '{{branch}}' at path: $worktree_path\"\n\n    # Run git worktree add\n    git worktree add \"$worktree_path\" origin/main -b \"{{branch}}\"\n\n    echo \"Moving into worktree directory: $worktree_path\"\n    cd \"$worktree_path\"\n\n    # Create virtual environment with uv (with python version if specified)\n    echo \"Creating virtual environment with uv using Python {{python}}...\"\n    uv venv --python \"{{python}}\"\n\n    # Activate the virtual environment and install project in editable mode\n    echo \"Installing project in editable mode...\"\n    source .venv/bin/activate\n    uv pip install -e .\n\n    echo \"\u2705 Worktree setup complete!\"\n    echo \"\ud83d\udcc1 Worktree location: $worktree_path\"\n    echo \"\ud83d\udc0d To activate the environment, run: source $worktree_path/.venv/bin/activate\"\n</code></pre> <p>Now running <code>just worktree feat/just-for-the-blog</code> will:</p> <ul> <li>create a git worktree on the same level of the current folder</li> <li>create a virtual env, activate it and install the codebase in editable mode</li> </ul> <p>The entire setup typically takes just a few seconds - a massive improvement over the minutes required before!</p> Proof <p></p>"},{"location":"blog/2025/07/20/stop-context-switching-how-git-worktree--uv-revolutionized-my-python-workflow/#uv-purists-disclaimer","title":"<code>uv</code> purists disclaimer","text":"<p>I know the spirit of <code>uv</code> is to avoid having virtual envs completely, yet especially when developing on open source I find myself using different envs, with different python versions and different library versions.</p> <p>I still didn't wrap my head around how to do it properly in the way <code>uv</code> wants this to be done! Feel free to send help!</p>"},{"location":"blog/2025/07/20/stop-context-switching-how-git-worktree--uv-revolutionized-my-python-workflow/#the-bottom-line","title":"The bottom line","text":"<p>For Python developers, the combination of <code>git worktree</code> and <code>uv</code> isn't just a workflow improvement, it's a paradigm shift. UV's speed eliminated the last major friction point that made worktrees impractical for Python projects.</p> <p>The result? Better code reviews, more thorough testing, cleaner dependency management, and the ability to work on multiple Python versions and feature branches simultaneously without losing your mind.</p> <p>Try the combo for a week. I guarantee you'll never go back to the old way of context-switching hell.</p> <p></p>"},{"location":"blog/archive/2025/07/","title":"2025 July","text":""},{"location":"blog/archive/2024/12/","title":"2024 December","text":""},{"location":"blog/archive/2024/05/","title":"2024 May","text":""},{"location":"blog/archive/2024/04/","title":"2024 April","text":""},{"location":"blog/archive/2024/03/","title":"2024 March","text":""},{"location":"blog/archive/2024/01/","title":"2024 January","text":""},{"location":"blog/archive/2023/12/","title":"2023 December","text":""},{"location":"blog/category/tips/","title":"Tips","text":""},{"location":"blog/category/programming/","title":"Programming","text":""},{"location":"blog/category/python/","title":"Python","text":""},{"location":"blog/category/oss/","title":"OSS","text":""},{"location":"blog/category/thoughts/","title":"Thoughts","text":""},{"location":"blog/category/til/","title":"TIL","text":""},{"location":"blog/category/personal/","title":"Personal","text":""}]}